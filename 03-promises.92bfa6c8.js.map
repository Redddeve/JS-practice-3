{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,gBACnCE,UAAWH,SAASC,cAAc,eAClCG,YAAaJ,SAASC,cAAc,kBAGlCI,EAAQ,KACRC,EAAO,KACPC,EAAS,KAgCb,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IAvCPZ,EAAKC,KAAKoB,iBAAiB,SAG3B,SAAiBC,GACf,OAAQA,EAAEC,QACR,KAAKvB,EAAKI,WACRG,EAAQiB,OAAOF,EAAEC,OAAOE,OACxB,MACF,KAAKzB,EAAKK,UACRG,EAAOgB,OAAOF,EAAEC,OAAOE,OACvB,MACF,KAAKzB,EAAKM,YACRG,EAASe,OAAOF,EAAEC,OAAOE,O,IAX/BzB,EAAKC,KAAKoB,iBAAiB,UAgB3B,SAAkBC,GAChBA,EAAEI,iBACF,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAQkB,IAC1BjB,EAAciB,EAAI,EAAGpB,EAAQC,EAAOmB,GACjCC,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALT,MACjBtB,EAAAiC,OAAOC,QAAQ,qBAAoCC,OAAftB,EAAS,QAAYsB,OAANH,EAAM,M,IAE1DI,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUwB,EAAKN,EAALT,MAClBtB,EAAAiC,OAAOK,QAAQ,oBAAmCH,OAAftB,EAAS,QAAYsB,OAANE,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('[name=delay]'),\n  stepInput: document.querySelector('[name=step]'),\n  amountInput: document.querySelector('[name=amount]'),\n};\n\nlet delay = null;\nlet step = null;\nlet amount = null;\n\nrefs.form.addEventListener('input', onInput);\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onInput(e) {\n  switch (e.target) {\n    case refs.delayInput:\n      delay = Number(e.target.value);\n      break;\n    case refs.stepInput:\n      step = Number(e.target.value);\n      break;\n    case refs.amountInput:\n      amount = Number(e.target.value);\n      break;\n  }\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + step * i)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","e","target","Number","value","preventDefault","i","then","param","delay1","Notify","success","concat","catch","delay2","failure"],"version":3,"file":"03-promises.92bfa6c8.js.map"}